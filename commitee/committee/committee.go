// Copyright 2018 The go-usechain Authors
// This file is part of the go-usechain library.
//
// The go-usechain library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-usechain library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-usechain library. If not, see <http://www.gnu.org/licenses/>.
//
// Author: lyszhang
// Time:   2018/07/11
// Description: Committee read ABaccount verify info, scan the accounts & change the AB account verify stat
//    		 		A1 = [hash(bA)]G + S = [hash(aB)]G + S
//			 	And have move the ringSig check part to tx validate check round, the committee's work is read the AB account
//			 	verify request, scan it and check the state

package main

import (
	"fmt"
	"github.com/usechain/go-usechain/accounts/keystore"
	"github.com/usechain/go-usechain/crypto"
	"github.com/usechain/go-usechain/commitee/committee-demo/contract"
	"github.com/usechain/go-usechain/common"
	//"github.com/usechain/go-usechain/common/hexutil"
	"github.com/usechain/go-usechain/log"
	"github.com/usechain/go-usechain/common/hexutil"
)

func main() {
	ringSig := "0xb3078303465336139666231323663323731303033366139623632643864616662653438313132343462353638396263303130353462653537303539393636383832643035356135383537396138663233363737653332353530623737613436333434313032353263623033646365626361623836393263333361306439363535623262652bb
	pubSkey := "0x0364c17a83c37aa08f7e61005026ea0034f87ba0bf00ddb85b642ad92f532661cf021a9598f1801120feed6dc770ceebaa463f89aec49e4dcffaf408e0dfae979347"

	for i := 0; true; i++ {
		fmt.Println("::::::::::::::::::Connecting::::::::::::::::")

		//A1, S1 := contract.ReadUnverifiedAccount()
		b := contract.ReadCommitteePrivatekey()
		//MainAccount := contract.Rea//dMainAccount()
		data, _ := hexutil.Decode(ringSig)
		_, mainAccount, _, _, _ :=crypto.DecodeRingSignOut(string(data))  			   //Main Array get
		fmt.Println(mainAccount[0])

		data, _ = hexutil.Decode(pubSkey)
		fmt.Printf("%s\n", data)
		A1, S1, _ := keystore.GeneratePKPairFromABaddress(data)  // Get

		for i := range mainAccount {
			fmt.Println(i)
			A := mainAccount[i]
			A1Recovery := crypto.ScanA1(b,  A, S1)
			fmt.Println("A1' : ", A1Recovery)
			fmt.Println("A1  : ", A1)
			if string(crypto.FromECDSAPub(&A1Recovery)) == string(crypto.FromECDSAPub(A1)) {
				fmt.Println(":::::::success")
				data := contract.GenerateConfirmAccountData(1,1)
				err := contract.SendRequestToContract(common.AuthenticationContractAddressString, data)
				if err != nil {
					log.Error("The request failed, pls check the usechain node running stat")
				}
			}
		}
		break
	}
}
